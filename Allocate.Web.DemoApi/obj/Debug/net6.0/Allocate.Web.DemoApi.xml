<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Allocate.Web.DemoApi</name>
    </assembly>
    <members>
        <member name="T:Allocate.Web.DemoApi.Controllers.OurControllerBase">
            <summary>
            This is a template ControllerBase for an API's Controllers.
            Every API Controller in a Web API project should extend this base class,
            so that we can apply all the Attributes and Filters in just one place.
            </summary>
        </member>
        <member name="T:Allocate.Common.Database.DataModels.DataModelBase">
            <summary>
            Data Model that is persisted to the Database.
            It is an abstract class instead of an interface because 
            the Dapper.SqlMapperExtensions generic methods used in DatabaseService
            require a concrete class type.
            When creating a table in a FluentMigrator script,
            extend BaseMigrator to get the CreateAllocateWebTable method,
            which will automatically add columns for all the below properties.
            </summary>
        </member>
        <member name="T:Allocate.Common.Database.Repositories.IGenericRepository">
            <summary>
            The interface is an experimental replacement for the previously use pattern of creating a repository for every single Domain entity in the system.
            So far it has greatly reduced duplication and sped up the time to deliver a CRUD controller.  And custom repositories can still be used if required.
            </summary>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.Get``1(System.Guid)">
            <summary>
            Performs a read of a single database row by Guid id.
            </summary>
            <param name="id">The Guid ID of the record to be retrieved.</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>The matching record, of type T, from table T.</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.Save``1(``0,System.Guid)">
            <summary>
            Upsert method for records of type T, saves an existing entry or writes a new one.
            </summary>
            <param name="obj">The object of type T to be written to the database (in table T)</param>
            <param name="savedBy">The Guid ID of the User making this change.</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetAll``1">
            <summary>
            Gets all records from table T
            </summary>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>All of the records from table T</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetAll``1(System.Action{Dapper.SqlBuilder},Allocate.Common.Database.Services.Pager,System.String)">
            <summary>
            Returns records matching the query as defined by the build, and 
            optionally filtered using the specified Pager
            </summary>
            <param name="build">Action used to construct the query being executed.</param>
            <param name="pager">Pager used to split the results into pages</param>
            <param name="template">A custom query builder template used to format the resulting raw SQL</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>The records from table T matching the build and filtered by any defined pager</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetBatch``1(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns all records from table T where the PK matches the given objectIds Guids.
            </summary>
            <param name="objectIds">The PKs of the objects to retrieve.</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>All of the records from table T that had a PK matching one of the given Guids.</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetByOtherGuid``1(System.String,System.Guid)">
            <summary>
            Returns all records from table T where T's otherIdColumn are equal to the otherId guid.  Often used for lookups
            on FK fields.
            </summary>
            <param name="otherIdColumn">The name of the column within table T to be searched.</param>
            <param name="otherId">The Guid value to search for in the given column.</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>All of the records from table T where otherIdColumn matched otherId</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetByOtherGuids``1(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns all records from table T where T's otherIdColumn is equal to a value in the otherIds enumerable.  Often used for lookups
            on FK fields.
            </summary>
            <param name="otherIdColumn">The name of the column within table T to be searched.</param>
            <param name="otherIds">The Guid values to search for in the given column.</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>All of the records from table T where T's otherIdColumn was equal to a value in the otherIds enumerable</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetByOtherUniqueColumn``1(System.String,System.String)">
            <summary>
            Find a record in table T by searching a string column with a unique index.  For finding a User by email address, for example.
            </summary>
            <param name="otherColumnName">The name of the column within table T to be searched.</param>
            <param name="otherId"></param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>The single object T where a uniquely indexed column "otherColumnName" equaled the string in 'otherId'.</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetUsingTwoIdColumnUniqueIndex``1(System.String,System.Guid,System.String,System.Guid)">
            <summary>
            Find a record in table T by searching a unique index over two Guid columns.
            </summary>
            <param name="column1Name">The first column within table T to be searched.</param>
            <param name="firstId">The Guid to search for in the first column.</param>
            <param name="column2Name">The second column within table T to be searched.</param>
            <param name="secondId">The Guid to search for in the second column.</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>The single record in table T having matched two guid columns in a unique index.</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetWhereIdArrayColumnContainsValue``1(System.String,System.Guid)">
            <summary>
            Use this method when needing to find records in table T where a Guid[] in "otherIdColumn" contains the value "otherId".
            An example is finding the Investing Entities where lpProfileIds contains someone's profile Id.
            </summary>
            <param name="otherIdColumn">The name of the column within table T to be searched.</param>
            <param name="otherId"></param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>The records in table T where a Guid[] "otherIdColumn" contains the value "otherId"</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetWhereIdArrayColumnContainsAtLeastOneValue``1(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Use this method when needing to find records in table T where a Guid[] in "otherIdColumn" contains at least one of the values in "otherIds"
            For example, find all Investing Entities where the LpProfileIds column contains one or more of the given lpProfileIds.
            </summary>
            <param name="otherIdColumnName">The name of the column within table T to be searched.</param>
            <param name="otherIds">The Guids to search for in the Guid[] contained in the column to be searched (one or more must be present).</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>The records in table T where a Guid[] "otherIdColumn" contains at least one of the values in "otherIds"</returns>
        </member>
        <member name="M:Allocate.Common.Database.Repositories.IGenericRepository.GetByStringKey``1(System.String,System.String)">
            <summary>
            Returns all of the records from table T where columnName exactly matched stringValue.
            </summary>
            <param name="columnName">The name of the column within table T to be searched.</param>
            <param name="stringValue">The string value to search for in the given column.</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>All of the records from table T where columnName exactly matched stringValue</returns>
        </member>
        <member name="M:Allocate.Common.Database.Services.IDatabaseService.Get``1(System.Action{Dapper.SqlBuilder})">
            <summary>
            Get a record matching the criteria specified in the build action
            </summary>
            <param name="build">Action used to construct the query being executed.</param>
            <returns>A record from table T matching the build</returns>
        </member>
        <member name="M:Allocate.Common.Database.Services.IDatabaseService.GetAll``1(System.Action{Dapper.SqlBuilder},Allocate.Common.Database.Services.Pager,System.String)">
            <summary>
            Returns records matching the query as defined by the build, and 
            optionally filtered using the specified Pager
            </summary>
            <param name="build">Action used to construct the query being executed.</param>
            <param name="pager">Pager used to split the results into pages</param>
            <param name="template">A custom query builder template used to format the resulting raw SQL</param>
            <typeparam name="T">A DataModel class that extends Allocate.Domain.Common.DataModels.DataModelBase</typeparam>
            <returns>The records from table T matching the build and filtered by any defined pager</returns>
        </member>
        <member name="M:Allocate.Common.Database.Services.IDatabaseService.Save``1(``0,System.Guid,System.Boolean)">
            <summary>
            Updates or inserts the object with the given id. Will set the Id on the object if it is empty.
            </summary>
        </member>
        <member name="M:Allocate.Common.Database.Services.IDatabaseService.Execute(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL.
            </summary>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
        </member>
        <member name="T:Allocate.Common.Exceptions.HttpStatusCodeException">
            <summary>
            Exception that includes an HTTP Status Code and a message to use to modify the current HTTP Response.
            Based on the exception of the same name from the old-school System.Web.Http, except that one extends 
            Exception without defining the constructors that take a message and an exception, and constructors are not 
            inherited in C#.  So we rolled our own.
            Ref: https://learn.microsoft.com/en-us/dotnet/api/system.web.http.httpresponseexception?view=aspnet-webapi-5.2
            Also see: https://docs.microsoft.com/en-us/aspnet/core/web-api/handle-errors?view=aspnetcore-3.1#use-exceptions-to-modify-the-response
            </summary>
        </member>
        <member name="P:Allocate.Common.Exceptions.HttpStatusCodeException.StatusCode">
            <summary>
            HTTP Status Code
            </summary>
        </member>
    </members>
</doc>
